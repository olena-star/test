 home work связанный список

Реализовать методы в MyLinkedList, 
pushToTail(int data), 
pushToIndex(int index, int data)
removeLast(), 
remove(int index)
get(int index)




class Node {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

class MyLinkedList {
    constructor() {
        this.head = null;
    }

    pushToTail(data) {
        const newNode = new Node(data);
        if (!this.head) {
            this.head = newNode;
        } else {
            let current = this.head;
            while (current.next) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    pushToIndex(index, data) {
        if (index < 0) return;

        const newNode = new Node(data);

        if (index === 0) {
            newNode.next = this.head;
            this.head = newNode;
            return;
        }

        let current = this.head;
        let prev = null;
        let currentIndex = 0;

        while (current && currentIndex < index) {
            prev = current;
            current = current.next;
            currentIndex++;
        }

        if (currentIndex === index) {
            prev.next = newNode;
            newNode.next = current;
        }
    }

    removeLast() {
        if (!this.head) return;

        if (!this.head.next) {
            this.head = null;
            return;
        }

        let current = this.head;
        let prev = null;

        while (current.next) {
            prev = current;
            current = current.next;
        }

        prev.next = null;
    }

    remove(index) {
        if (index < 0 || !this.head) return;

        if (index === 0) {
            this.head = this.head.next;
            return;
        }

        let current = this.head;
        let prev = null;
        let currentIndex = 0;

        while (current && currentIndex < index) {
            prev = current;
            current = current.next;
            currentIndex++;
        }

        if (currentIndex === index && current) {
            prev.next = current.next;
        }
    }

    get(index) {
        if (index < 0 || !this.head) return null;

        let current = this.head;
        let currentIndex = 0;

        while (current && currentIndex < index) {
            current = current.next;
            currentIndex++;
        }

        return current ? current.data : null;
    }
}

// Пример
const linkedList = new MyLinkedList();
linkedList.pushToTail(10);
linkedList.pushToTail(20);
linkedList.pushToTail(30);

console.log(linkedList.get(1)); 
linkedList.pushToIndex(1, 25);
console.log(linkedList.get(1)); 
linkedList.remove(2);
console.log(linkedList.get(2)); 
linkedList.removeLast();
console.log(linkedList.get(1)); 






2....Переделать односвязный в двусвязный




class Node {
    constructor(data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class MyLinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    pushToTail(data) {
        const newNode = new Node(data);
        if (!this.head) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            newNode.prev = this.tail;
            this.tail.next = newNode;
            this.tail = newNode;
        }
    }

    pushToIndex(index, data) {
        if (index < 0) return;

        const newNode = new Node(data);

        if (index === 0) {
            newNode.next = this.head;
            if (this.head) {
                this.head.prev = newNode;
            }
            this.head = newNode;
            if (!this.tail) {
                this.tail = newNode;
            }
            return;
        }

        let current = this.head;
        let currentIndex = 0;

        while (current && currentIndex < index) {
            current = current.next;
            currentIndex++;
        }

        if (currentIndex === index && current) {
            newNode.prev = current.prev;
            newNode.next = current;
            if (current.prev) {
                current.prev.next = newNode;
            }
            current.prev = newNode;
        }
    }

    removeLast() {
        if (!this.tail) return;

        if (this.head === this.tail) {
            this.head = null;
            this.tail = null;
            return;
        }

        this.tail = this.tail.prev;
        this.tail.next = null;
    }

    remove(index) {
        if (index < 0 || !this.head) return;

        if (index === 0) {
            this.head = this.head.next;
            if (this.head) {
                this.head.prev = null;
            } else {
                this.tail = null;
            }
            return;
        }

        let current = this.head;
        let currentIndex = 0;

        while (current && currentIndex < index) {
            current = current.next;
            currentIndex++;
        }

        if (currentIndex === index && current) {
            if (current.prev) {
                current.prev.next = current.next;
            }
            if (current.next) {
                current.next.prev = current.prev;
            } else {
                this.tail = current.prev;
            }
        }
    }

    get(index) {
        if (index < 0 || !this.head) return null;

        let current = this.head;
        let currentIndex = 0;

        while (current && currentIndex < index) {
            current = current.next;
            currentIndex++;
        }

        return current ? current.data : null;
    }
}

// Пример использования
const linkedList = new MyLinkedList();
linkedList.pushToTail(10);
linkedList.pushToTail(20);
linkedList.pushToTail(30);

console.log(linkedList.get(1));
linkedList.pushToIndex(1, 25);
console.log(linkedList.get(1)); 
linkedList.remove(2);
console.log(linkedList.get(2)); 
linkedList.removeLast();
console.log(linkedList.get(1)); 
